<?xml version="1.0"?>

<!--
 encuestame system online surveys
 Copyright (C) 2005-2008 encuestame Development Team

 This product is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License version 2.1 as published by the Free Software Foundation.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
-->

<project name="encuestame" default="usage" basedir=".">
    <property file="build.properties" />
  <property file="dev.properties" />

    <target name="usage">
        <echo message="Targets:" />
        <echo message="  clean -- clean all" />
        <echo message="  doc --   java doc" />
        <echo message="  compile -- compile java's" />
        <echo message="  usage -- help" />
        <echo message="  init -- init all tagets" />
        <echo message="  tests -- init testcase" />
        <echo message="  dist -- create jar and war" />
    </target>

    <!-- classpath -->
    <path id="lib.classpath">
        <fileset dir="${em.app.lib}" includes="**/*.jar" />
    </path>

    <path id="build.classpath">
        <path refid="lib.classpath" />
        <pathelement location="${build.class}" />
    </path>

    <path id="config.classpath">
        <pathelement location="${src.spring}" />
        <pathelement location="${src.properties}" />
    </path>

    <path id="all.classpath">
        <path refid="build.classpath" />
        <path refid="config.classpath" />

    </path>

     <path id="cobertura.classpath">
            <fileset dir="${cobertura.dir}">
                <include name="${cobertura.jar.file}" />
                <include name="${em.app.lib}**/*.jar" />
            </fileset>
     </path>

    <path id="tests.classpath">
        <pathelement location="${cobertura.dir}${cobertura.jar.file}"/>
        <pathelement location="${test.source}"/>
        <pathelement location="${build.test}"/>
    </path>


    <!-- create javadoc -->
    <target name="doc" depends="">
        <fail unless="dist.dir" message="documentation" />
        <delete dir="${doc}" />
        <mkdir dir="${doc}" />
        <javadoc sourcepath="${src.java}" destdir="${doc}" packagenames="*" author="true" private="true" version="true">
            <classpath refid="build.classpath" />
        </javadoc>
    </target>

    <!-- create war -->
    <target name="dist" depends="clean-dist,web">
        <fail unless="war.name" message="falta el nombre del war" />
        <fail unless="webcontent" message="path of webcontent" />
        <war destfile="${dist.dir}/${war.name}" basedir="${webcontent}" webxml="${webcontent}/WEB-INF/web.xml" />
    </target>


    <!-- web build -->
    <target name="web" depends="clean-web,build">
        <fail unless="webapp.dir" message="required path base dir" />
        <fail unless="webcontent" message="required path of web content" />
        <fail unless="jar.name" message="required name of jar" />
        <fail unless="dist.dir" message="required path of distribution directory" />
        <mkdir dir="${webcontent}" />
        <mkdir dir="${web-inf}" />
        <mkdir dir="${web-inf}/classes" />
        <mkdir dir="${web-inf}/lib" />
        <mkdir dir="${web-inf}/config" />
        <mkdir dir="${web-inf}/scripts" />
        <mkdir dir="${web-inf}/taglib" />
        <mkdir dir="${web-inf}/controllersTemplate" />
      <mkdir dir="${web-inf}/flows" />

        <!-- create manifest -->
        <mkdir dir="${web-inf}/META-INF" />
        <manifest file="${web-inf}/META-INF/MANIFEST.MF">
            <attribute name="Built-By" value="Juan C Picado">
            </attribute>
            <section name="common">
                <attribute name="Specification-Title" value="${em.app.name}">
                </attribute>
                <attribute name="Specification-Version" value="${em.version}">
                </attribute>
                <attribute name="Specification-Vendor" value="info@encuestame.org">
                </attribute>
                <attribute name="Implementation-Title" value="encuestame">
                </attribute>
                <attribute name="Implementation-Version" value="${version}">
                </attribute>
                <attribute name="Implementation-Vendor" value="encuestame.org">
                </attribute>
            </section>
        </manifest>

        <!-- copy libs -->
        <copy todir="${web-inf}/lib">
            <fileset dir="${em.app.lib}" />
        </copy>

        <copy file="${dist.dir}/${jar.name}" todir="${web-inf}/lib" />

        <!-- copy javascript source -->
        <copy todir="${webcontent}/scripts/">
            <fileset dir="${src.js}/" />
        </copy>

        <!-- copy taglibs -->
        <copy todir="${web-inf}/taglib/">
            <fileset dir="${src.taglibs}/" />
        </copy>

        <!-- copy  spring xml config-->

        <copy todir="${web-inf}/config/">
            <fileset dir="${src.spring}/" excludes="c*.*" />
        </copy>

        <copy todir="${web-inf}/controllersTemplate/">
             <fileset dir="${src.spring}/controller"/>
        </copy>

        <copy todir="${web-inf}/flows/">
            <fileset dir="${src.spring}/webflow"/>
        </copy>

        <!-- copy resources -->
        <copy todir="${webcontent}">
            <fileset dir="${src.re}/" />
        </copy>

         <!-- copy error xhtml -->
        <copy todir="${webcontent}">
            <fileset dir="${src.xhtml}/" excludes="error*.*" />
        </copy>

        <!-- copy webconfig xml files -->
        <copy file="${src.jsf}/faces-config.xml" todir="${web-inf}" />
        <copy file="${src.jsf}/web.xml" todir="${web-inf}" />
        <copy file="${src.xhtml}/error404.xhtml" todir="${web-inf}" />

        <!-- copy properties files -->
        <copy todir="${web-inf}/classes">
            <fileset dir="${src.properties}">
            </fileset>
        </copy>
    </target>

     <target
        name="fast.deploy"
        depends="web">
          <fail unless="tomcat.path"/>
          <fail unless="webcontent"/>
          <delete file="${tomcat.path}webapps/encuestame"/>
          <delete file="${tomcat.path}webapps/encuestame/${war.name}"/>
          <copy todir="${tomcat.path}webapps/encuestame">
              <fileset dir="${webcontent}"/>
          </copy>
      </target>

    <target
          name="html.deploy">
            <fail unless="tomcat.path"/>
            <copy todir="${tomcat.path}webapps/encuestame/">
                <fileset dir="${src.xhtml}"/>
            </copy>
            <copy todir="${tomcat.path}webapps/encuestame/">
                <fileset dir="${src.re}"/>
            </copy>
             <copy todir="${tomcat.path}webapps/encuestame/WEB-INF">
                 <fileset dir="${src.taglibs}"/>
            </copy>
    </target>


     <!-- clean targets -->

    <target name="clean-build">
        <fail unless="build" />
        <delete dir="${build.class}" />
        <delete dir="${build.test}" />
        <delete dir="${build}" />
    </target>

    <target name="clean-web">
        <fail unless="webcontent" />
        <delete dir="${webcontent}" />
    </target>

    <target name="clean-doc">
        <fail unless="doc" />
        <delete dir="${doc}" />
    </target>

    <target name="clean-dist">
        <fail unless="dist.dir" />
        <delete dir="${dist.dir}" />
    </target>

    <target name="clean-report">
        <fail unless="report.dir" />
        <delete dir="${report.dir}" />
    </target>

    <target name="clean-junit">
        <fail unless="test.reports.dir" />
        <fail unless="test.results.dir" />
        <delete dir="${test.reports.dir}" />
        <delete dir="${test.results.dir}" />
    </target>

    <!-- clean targets -->

    <target name="clean" depends="clean-dist,clean-junit,clean-doc,clean-build,clean-web" />

    <!-- prepare build directory -->

    <target name="prepare-build" description="compile core source code">
        <fail unless="build" message="se neceista la variable build" />
        <mkdir dir="${build}" />
        <fail unless="build.compile" message="se neceista la variable build" />
        <mkdir dir="${build.compile}" />
        <fail unless="build.class" message="se neceista la variable build" />
        <mkdir dir="${build.class}" />
        <fail unless="build.test" message="se neceista la variable build" />
        <mkdir dir="${build.test}" />
    </target>

    <!-- compile source code -->
    <target name="compile" description="compile core source code" depends="prepare-build">
        <javac destdir="${build.class}" debug="on" deprecation="false" optimize="false" failonerror="true">
            <src path="${src.java}">
            </src>
            <classpath refid="lib.classpath" />
        </javac>
        <javac debug="on" srcdir="${src.test}" destdir="${build.test}" target="1.6" source="1.6" fork="yes" deprecation="false">
            <classpath refid="build.classpath" />
        </javac>
    </target>

    <!-- build  jar -->
    <target name="build" depends="compile" description="jar file">
        <mkdir dir="${dist.dir}" />
        <jar destfile="${dist.dir}/${jar.name}" basedir="${build.class}">
            <manifest>
                <attribute name="Built-By" value="Juan C Picado">
                </attribute>
                <section name="common">
                    <attribute name="Specification-Title" value="${em.app.name}">
                    </attribute>
                    <attribute name="Specification-Version" value="${em.version}">
                    </attribute>
                    <attribute name="Specification-Vendor" value="juan@encuesta.me">
                    </attribute>
                    <attribute name="Implementation-Title" value="encuestame">
                    </attribute>
                    <attribute name="Implementation-Version" value="${version}">
                    </attribute>
                    <attribute name="Implementation-Vendor" value="encuestame.org">
                    </attribute>
                </section>
            </manifest>
        </jar>
    </target>

    <!--cobertura -->

    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

    <target name="cobertura-instrument" depends="compile">
        <mkdir dir="${cobertura.classes.instrument}" />
        <mkdir dir="${cobertura.report.dir}" />
        <mkdir dir="${cobertura.xml.dir}" />
        <cobertura-instrument todir="${cobertura.classes.instrument}"  datafile="${cobertura.data.dir}${cobertura.ser.file}">
            <ignore regex="org.apache.log4j.*" />
            <fileset dir="${build.class}">
                <include name="**/*.class" />
                <exclude name="**/*Test.class" />
            </fileset>
        </cobertura-instrument>
    </target>



    <!-- run this target to generate the coverage reports -->
    <target name="coverage-report" depends="tests">
        <fail unless="cobertura.report.dir"/>
                    <mkdir dir="${cobertura.report.dir}"/>
                    <cobertura-report srcdir="${src.java}"
                      format="html"
                      datafile="${cobertura.data.dir}${cobertura.ser.file}"
                      destdir="${cobertura.report.dir}">

                    </cobertura-report>
                    <cobertura-report
                      format="xml" srcdir="${src.java}"
                      datafile="${cobertura.data.dir}${cobertura.ser.file}"
                      destdir="${cobertura.report.dir}">

        </cobertura-report>
    </target>

    <target name="cobertura" depends="coverage-report"/>


    <!-- tests -->
    <target name="tests-compile" depends="compile">
        <mkdir dir="${test.reports.dir}" />
        <mkdir dir="${test.results.dir}" />
        <junit  printsummary="yes"
            fork="yes"
            forkmode="once">
            <classpath>
              <!-- always first -->
            <pathelement location="${cobertura.classes.instrument}"/>
             <path refid="build.classpath" />
             <path refid="tests.classpath"/>
             <path refid="config.classpath" />
            </classpath>
             <sysproperty key="log4j.configuration" value="file:${src.properties}log4j.properties"/>
             <sysproperty
              key="net.sourceforge.cobertura.datafile"
              file="${cobertura.data.dir}${cobertura.ser.file}"/>
            <formatter type="xml" />
            <batchtest todir="${test.results.dir}">
               <fileset dir="${test.source}">
                 <include name="**/*Test*.java"/>
                 <exclude name="**/*Base*.java"/>
               </fileset>
            </batchtest>
        </junit>
    </target>

    <target  name="tests-report" >
         <fail unless="test.reports.dir"/>
                <mkdir dir="${test.reports.dir}"/>
                    <junitreport todir="${test.reports.dir}">
                        <fileset dir="${test.results.dir}">
                            <include name="TEST-*.xml"/>
                        </fileset>
          <report todir="${test.reports.dir}" format="frames"/>
        </junitreport>
    </target>

    <target  name="run-tests" depends="tests-compile,tests-report" />

    <target  name="tests" depends="cobertura-instrument,run-tests" />



    <!--FINDBUGS -->

    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" />
    <target name="findbugs" depends="report">
        <findbugs home="${findbugs.home}" output="xml" outputFile="${report.dir}encuestame-fb.xml">
            <class location="${build.class}" />
            <sourcePath path="${src.java}" />
        </findbugs>
    </target>

    <!--CHECKSTYLE -->

    <taskdef resource="checkstyletask.properties" classpath="${em.app.lib}checkstyle-all-5.0.jar" />

    <taskdef resource="checkstyletask.properties" />

    <target name="checkstyle" description="Generates a report of code convention violations." depends="report">
        <checkstyle config="sun_checks.xml" failureProperty="checkstyle.failure" failOnViolation="false">
            <formatter type="xml" tofile="${report.dir}checkstyle_report.xml" />
            <fileset dir="${src.java}" includes="**/*.java" />
        </checkstyle>
    </target>

    <target name="report">
        <fail unless="report.dir" />
        <mkdir dir="${report.dir}" />
    </target>


    <!--PMD-->

    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" />


    <target name="pmd">
        <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="lib.classpath" />
        <pmd rulesetfiles="imports">
            <formatter type="xml" toFile="${report.dir}pmd_report.xml" toConsole="true" />
            <fileset dir="${src.java}">
                <include name="**/*.java" />
            </fileset>
        </pmd>
    </target>

    <!-- DRY -->

    <target name="cpd">
        <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" />
        <cpd minimumTokenCount="10" outputFile="${report.dir}cpd.xml" format="xml">
            <fileset dir="${src.java}">
                <include name="**/*.java" />
            </fileset>
            <fileset dir="${test.source}">
                          <include name="**/*.java" />
            </fileset>
        </cpd>
    </target>

    <!-- Create or Drop Schema -->
     <target name="schema"
          depends="compile">
          <sequential>
            <java classname="org.encuestame.core.persistence.util.EnMeSchemaExport"
                  fork="yes">
            <classpath refid="all.classpath" />
            <jvmarg value="-Xmx512M"/>
            </java>
         </sequential>
     </target>


    <!-- findbugs,checkstyle,pmd -->
    <target name="init" depends="clean,web,tests,findbugs,pmd,cpd,cobertura,doc" />

</project>
